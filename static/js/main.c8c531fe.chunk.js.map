{"version":3,"sources":["ContactList/ContactsList.js","Redux/action.js","Filter/Filter.js","Forms/Form.js","App.js","Redux/store.js","index.js"],"names":["getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","contact","name","includes","connect","contacts","items","dispatch","onDeleteContact","id","type","payload","className","map","number","onClick","state","value","onChange","e","target","Form","handleChange","event","currentTarget","setState","handleSubmit","preventDefault","props","onSubmit","resetForm","this","pattern","title","required","Component","text","data","uuidv4","App","contactsInitialState","rootReducer","combineReducers","item","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8c531fe.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../Redux/action';\nimport './ContactList.css';\n\nfunction ContactsList({ contacts, onDeleteContact }) {\n  return (\n    <ul className=\"contactsList\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"item\">\n          <span className=\"itemText\">\n            <span className=\"itemName\">{name}:</span>\n            <span className=\"itemNum\">{number}</span>\n          </span>\n\n          <button\n            //id={contact.id}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className=\"button\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(actions.deleteAction(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import { v4 as uuidv4 } from 'uuid';\n\nexport const saveAction = data => ({\n  type: 'phonebook/Save',\n  payload: {\n    id: uuidv4(),\n    name: data.name,\n    number: data.number,\n  },\n});\n\nexport const deleteAction = contactID => ({\n  type: 'phonebook/Delete',\n  payload: contactID,\n});\n\nexport const updateFilter = value => ({\n  type: 'phonebook/updateFilter',\n  payload: value,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../Redux/action';\nimport './Filter.css';\n\nconst Filter = ({ value, onChange }) => (\n  <div className=\"filter\">\n    <label>\n      <span className=\"filterText\">Filter</span>\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(actions.updateFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../Redux/action';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"form\">\n        <label>\n          <h2>Name</h2>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          <h2>Number</h2>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\" className=\"button\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: text => dispatch(actions.saveAction(text)),\n});\n\nexport default connect(null, mapDispatchToProps)(Form);\n","import React from 'react';\n\nimport './App.css';\nimport ContactsList from './ContactList/ContactsList';\nimport Filter from './Filter/Filter';\nimport Form from './Forms/Form';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"formsContainer\">\n        <Form />\n      </div>\n\n      <div className=\"contactsContainer\">\n        <div className=\"contacts\">\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactsList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// componentDidMount() {\n//   console.log('App componentDidMount');\n\n//   const contacts = localStorage.getItem('Contacts');\n//   const parsedContacts = JSON.parse(contacts);\n//   console.log(parsedContacts);\n//   if (parsedContacts) {\n//     this.setState({ contacts: parsedContacts });\n//   }\n// }\n\n// componentDidUpdate(prevProps, prevState) {\n//   console.log('App componentDidUpdate');\n//   if (this.state.contacts !== prevState.contacts) {\n//     console.log('Обновился список контактов');\n\n//     localStorage.setItem('Contacts', JSON.stringify(this.state.contacts));\n//   }\n// }\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst contactsInitialState = {\n  items: [\n    { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n    { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n    { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n    { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  ],\n  filter: '',\n};\n\nconst contactsReducer = (state = contactsInitialState, { type, payload }) => {\n  switch (type) {\n    case 'phonebook/Save':\n      return {\n        ...state,\n        items: [...state.items, payload],\n      };\n\n    case 'phonebook/Delete':\n      return {\n        ...state,\n        items: state.items.filter(item => item.id !== payload),\n      };\n\n    case 'phonebook/updateFilter':\n      return {\n        ...state,\n        filter: payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools()); // const store = createStore(reducer, { a: 15}); - передача начального состояния (localStorage)\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}