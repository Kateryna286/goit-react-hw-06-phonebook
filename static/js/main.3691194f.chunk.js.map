{"version":3,"sources":["Redux/contacts/contacts-types.js","ContactList/ContactsList.js","Redux/contacts/contacts-actions.js","Filter/Filter.js","Forms/Form.js","App.js","Redux/contacts/contacts-reducer.js","Redux/store.js","index.js"],"names":["ADD","DELETE","UPDATE_FILTER","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","contact","name","includes","connect","contacts","items","dispatch","onDeleteContact","id","type","actionTypes","payload","className","map","number","onClick","state","value","onChange","e","target","Form","handleChange","event","currentTarget","setState","handleSubmit","preventDefault","props","onSubmit","some","item","alert","resetForm","this","pattern","title","required","Component","data","uuidv4","App","itemsInitialState","combineReducers","rootReducer","contactsReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3691194f.chunk.js","sourcesContent":["export const ADD = 'phonebook/Add';\nexport const DELETE = 'phonebook/Delete';\nexport const UPDATE_FILTER = 'phonebook/UpdateFilter';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../Redux/contacts/contacts-actions';\nimport './ContactList.css';\n\nfunction ContactsList({ contacts, onDeleteContact }) {\n  return (\n    <ul className=\"contactsList\">\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className=\"item\">\n          <span className=\"itemText\">\n            <span className=\"itemName\">{name}:</span>\n            <span className=\"itemNum\">{number}</span>\n          </span>\n\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className=\"button\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(actions.deleteAction(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import * as actionTypes from './contacts-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const saveAction = data => ({\n  type: actionTypes.ADD,\n  payload: {\n    id: uuidv4(),\n    name: data.name,\n    number: data.number,\n  },\n});\n\nexport const deleteAction = contactID => ({\n  type: actionTypes.DELETE,\n  payload: contactID,\n});\n\nexport const updateFilter = value => ({\n  type: actionTypes.UPDATE_FILTER,\n  payload: value,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../Redux/contacts/contacts-actions';\nimport './Filter.css';\n\nconst Filter = ({ value, onChange }) => (\n  <div className=\"filter\">\n    <label>\n      <span className=\"filterText\">Filter</span>\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(actions.updateFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../Redux/contacts/contacts-actions';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const { items, onSubmit } = this.props;\n    const { name } = this.state;\n\n    if (items.some(item => item.name === name)) {\n      alert(`${name} already exist in contact list`);\n      return;\n    }\n\n    onSubmit(this.state);\n\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"form\">\n        <label>\n          <h2>Name</h2>\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label>\n          <h2>Number</h2>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\" className=\"button\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: state.contacts.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(actions.saveAction(value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport ContactsList from './ContactList/ContactsList';\nimport Filter from './Filter/Filter';\nimport Form from './Forms/Form';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"formsContainer\">\n        <Form />\n      </div>\n\n      <div className=\"contactsContainer\">\n        <div className=\"contacts\">\n          <h2>Contacts</h2>\n          <Filter />\n          <ContactsList />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// componentDidMount() {\n//   console.log('App componentDidMount');\n\n//   const contacts = localStorage.getItem('Contacts');\n//   const parsedContacts = JSON.parse(contacts);\n//   console.log(parsedContacts);\n//   if (parsedContacts) {\n//     this.setState({ contacts: parsedContacts });\n//   }\n// }\n\n// componentDidUpdate(prevProps, prevState) {\n//   console.log('App componentDidUpdate');\n//   if (this.state.contacts !== prevState.contacts) {\n//     console.log('Обновился список контактов');\n\n//     localStorage.setItem('Contacts', JSON.stringify(this.state.contacts));\n//   }\n// }\n","import { combineReducers } from 'redux';\nimport * as actionTypes from './contacts-types';\n\nconst itemsInitialState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst itemsReducer = (state = itemsInitialState, { type, payload }) => {\n  switch (type) {\n    case actionTypes.ADD:\n      return [...state, payload];\n\n    case actionTypes.DELETE:\n      return state.filter(item => item.id !== payload);\n\n    default:\n      return state;\n  }\n};\n\nconst filterReducer = (state = '', { type, payload }) => {\n  switch (type) {\n    case actionTypes.UPDATE_FILTER:\n      return payload;\n\n    default:\n      return state;\n  }\n};\n\n// contactsReducer:\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools()); // const store = createStore(reducer, { a: 15}); - передача начального состояния (localStorage)\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './App';\nimport store from './Redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}